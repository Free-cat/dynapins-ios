name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-macos:
    name: Test on macOS (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Xcode version
      run: xcodebuild -version
      
    - name: Cache Swift PM
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
      
    - name: Build
      run: swift build -v
      
    - name: Run tests
      run: swift test -v --enable-code-coverage
      
    - name: Generate code coverage
      if: matrix.os == 'macos-14'
      continue-on-error: true
      run: |
        xcrun llvm-cov export \
          .build/debug/DynamicPinningPackageTests.xctest/Contents/MacOS/DynamicPinningPackageTests \
          -instr-profile .build/debug/codecov/default.profdata \
          -format="lcov" > coverage.lcov || echo "Coverage generation failed, but continuing"
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'macos-14'
      continue-on-error: true
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.lcov
        fail_ci_if_error: false

  lint:
    name: SwiftLint
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
      
    - name: Run SwiftLint
      run: |
        swiftlint --version
        swiftlint lint --strict

  test-ios:
    name: Test on iOS Simulator
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Xcode version
      run: xcodebuild -version
      
    - name: List available simulators
      run: xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
      
    - name: Run iOS Tests
      run: |
        xcodebuild test \
          -scheme DynamicPinning \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -skipPackagePluginValidation \
          -enableCodeCoverage YES

  build-ios:
    name: Build for iOS
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Xcode version
      run: xcodebuild -version
      
    - name: Build for iOS Simulator
      run: |
        xcodebuild build \
          -scheme DynamicPinning \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -skipPackagePluginValidation
      
    - name: Build for iOS Device
      run: |
        xcodebuild build \
          -scheme DynamicPinning \
          -destination 'generic/platform=iOS' \
          -skipPackagePluginValidation

